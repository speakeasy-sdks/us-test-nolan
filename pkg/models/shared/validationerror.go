// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/us-test-nolan/pkg/utils"
)

type ValidationErrorLocType string

const (
	ValidationErrorLocTypeStr     ValidationErrorLocType = "str"
	ValidationErrorLocTypeInteger ValidationErrorLocType = "integer"
)

type ValidationErrorLoc struct {
	Str     *string
	Integer *int64

	Type ValidationErrorLocType
}

func CreateValidationErrorLocStr(str string) ValidationErrorLoc {
	typ := ValidationErrorLocTypeStr

	return ValidationErrorLoc{
		Str:  &str,
		Type: typ,
	}
}

func CreateValidationErrorLocInteger(integer int64) ValidationErrorLoc {
	typ := ValidationErrorLocTypeInteger

	return ValidationErrorLoc{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *ValidationErrorLoc) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValidationErrorLocTypeStr
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = ValidationErrorLocTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ValidationErrorLoc) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ValidationError struct {
	Loc  []ValidationErrorLoc `json:"loc"`
	Msg  string               `json:"msg"`
	Type string               `json:"type"`
}

func (o *ValidationError) GetLoc() []ValidationErrorLoc {
	if o == nil {
		return []ValidationErrorLoc{}
	}
	return o.Loc
}

func (o *ValidationError) GetMsg() string {
	if o == nil {
		return ""
	}
	return o.Msg
}

func (o *ValidationError) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}
